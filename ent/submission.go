// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"judge-engine/ent/schema/enum"
	"judge-engine/ent/submission"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Submission is the model entity for the Submission schema.
type Submission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Source code of the submission
	Code string `json:"code,omitempty"`
	// Lenght of the source code
	CodeLength int `json:"codeLength,omitempty"`
	// Memory usage of the process. Unit is 'KB'
	Memory int `json:"memory,omitempty"`
	// Response linux signal of process
	Response enum.ResponseType `json:"response,omitempty"`
	// Submission created time
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Submission updated time
	UpdatedAt    time.Time `json:"updatedAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submission.FieldCodeLength, submission.FieldMemory:
			values[i] = new(sql.NullInt64)
		case submission.FieldCode, submission.FieldResponse:
			values[i] = new(sql.NullString)
		case submission.FieldCreatedAt, submission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case submission.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submission fields.
func (s *Submission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case submission.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case submission.FieldCodeLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field codeLength", values[i])
			} else if value.Valid {
				s.CodeLength = int(value.Int64)
			}
		case submission.FieldMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				s.Memory = int(value.Int64)
			}
		case submission.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				s.Response = enum.ResponseType(value.String)
			}
		case submission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case submission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Submission.
// This includes values selected through modifiers, order, etc.
func (s *Submission) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Submission.
// Note that you need to call Submission.Unwrap() before calling this method if this Submission
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Submission) Update() *SubmissionUpdateOne {
	return NewSubmissionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Submission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Submission) Unwrap() *Submission {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submission is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Submission) String() string {
	var builder strings.Builder
	builder.WriteString("Submission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("code=")
	builder.WriteString(s.Code)
	builder.WriteString(", ")
	builder.WriteString("codeLength=")
	builder.WriteString(fmt.Sprintf("%v", s.CodeLength))
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(fmt.Sprintf("%v", s.Memory))
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(fmt.Sprintf("%v", s.Response))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Submissions is a parsable slice of Submission.
type Submissions []*Submission
